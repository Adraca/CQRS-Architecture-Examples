swagger: '2.0'
info:
  description: 'This is a sample server Blog API, a CQRS example application.  You can find out more about this sample on Github.'
  version: '1.0.0'
  title: 'Blog API'
tags:
  - name: 'article'
    description: 'The blog posts made on the site.'
  - name: 'author'
    description: 'The authors of the blog posts.'
  - name: 'comment'
    description: 'Operations on the comments'
schemes:
  - 'https'
  - 'http'
paths:
  /article:
    post:
      tags:
        - 'article'
      summary: 'Add a new article to the blog'
      description: ''
      operationId: 'addArticle'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Article object that needs to be added to the blog'
          required: true
          schema:
            $ref: '#/definitions/Article'
      responses:
        405:
          description: 'Invalid input'
    put:
      tags:
        - 'article'
      summary: 'Update an existing article'
      description: ''
      operationId: 'updateArticle'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'body'
          description: 'Article object that needs to be added to the blog'
          required: true
          schema:
            $ref: '#/definitions/Article'
      responses:
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Article not found'
        405:
          description: 'Validation exception'
    get:
      tags:
        - 'article'
      summary: 'Get latest articles'
      description: ''
      operationId: 'latestArticles'
      produces:
        - 'application/json'
      responses:
        404:
          description: 'Article not found'
  /article/findByAuthor:
    get:
      tags:
        - 'article'
      summary: 'Finds Articles by author'
      description: 'Multiple author values can be provided with comma separated strings'
      operationId: 'findArticlesByAuthor'
      produces:
        - 'application/json'
      parameters:
        - name: 'author'
          in: 'query'
          description: 'Author/s values that need to be considered for filter'
          required: true
          type: 'array'
          items:
            type: 'string'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Article'
        400:
          description: 'Invalid status value'
  /article/{articleId}:
    get:
      tags:
        - 'article'
      summary: 'Find article by ID'
      description: 'Returns a single article'
      operationId: 'getArticleById'
      produces:
        - 'application/json'
      parameters:
        - name: 'articleId'
          in: 'path'
          description: 'ID of the article to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Article'
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Article not found'
    delete:
      tags:
        - 'article'
      summary: 'Deletes a article'
      description: ''
      operationId: 'deleteArticle'
      produces:
        - 'application/json'
      parameters:
        - name: 'articleId'
          in: 'path'
          description: 'Article id to delete'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Article not found'
  /author/{authorId}:
    get:
      tags:
        - 'author'
      summary: 'Find author by ID'
      description: 'Returns a single author'
      operationId: 'getAuthorById'
      produces:
        - 'application/json'
      parameters:
        - name: 'authorId'
          in: 'path'
          description: 'ID of the author to return'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        200:
          description: 'successful operation'
          schema:
            $ref: '#/definitions/Author'
        400:
          description: 'Invalid ID supplied'
        404:
          description: 'Author not found'
  /comment/{commentId}:
    post:
      tags:
        - 'comment'
      summary: 'Add a new comment to the blog'
      description: 'Returns a single comment'
      operationId: 'addComment'
      consumes:
        - 'application/json'
      produces:
        - 'application/json'
      parameters:
        - name: 'commentId'
          in: 'path'
          description: 'ID of the comment that needs to be added to the blog'
          required: true
          type: 'integer'
          format: 'int64'
      responses:
        405:
          description: 'Invalid input'
  /comment/findByArticle:
    get:
      tags:
        - 'comment'
      summary: 'Finds Comments by article'
      description: ''
      operationId: 'findCommentsByArticle'
      produces:
        - 'application/json'
      parameters:
        - name: 'articleId'
          in: 'query'
          description: 'Article value that need to be considered for filter'
          required: true
          type: 'integer'
      responses:
        200:
          description: 'successful operation'
          schema:
            type: 'array'
            items:
              $ref: '#/definitions/Comment'
        400:
          description: 'Invalid status value'
definitions:
  Article:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      title:
        type: 'string'
      content:
        type: 'string'
      creationDate:
        type: 'string'
        format: 'date-time'
      authorId:
        type: 'integer'
        format: 'int64'
  Comment:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      content:
        type: 'string'
      creationDate:
        type: 'string'
        format: 'date-time'
      authorId:
        type: 'integer'
        format: 'int64'
      articleId:
        type: 'integer'
        format: 'int64'
  Author:
    type: 'object'
    properties:
      id:
        type: 'integer'
        format: 'int64'
      name:
        type: 'string'
      registerDate:
        type: 'string'
        format: 'date-time'
externalDocs:
  description: 'Find out more about CQRS'
  url: 'https://en.wikipedia.org/wiki/Commandâ€“query_separation'
